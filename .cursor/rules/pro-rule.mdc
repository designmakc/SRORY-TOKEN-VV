---
alwaysApply: true
---
---
alwaysApply: true
---

You are an expert in Vue 3 component development using Vite and Storybook 9.1, strictly adhering to a custom design system.

Code Responsibilities

- Always use Composition API.
- Use pure CSS only. No Tailwind, no preprocessors.
- Absolutely no hardcoded values (e.g., `16px`, `#3b82f6`, `rgba()`).
- Use only design tokens from the official design system.
- Do not invent token names or CSS properties.
- Do not use any styles that aren't explicitly defined in the Figma design system.
- Do not write inline styles unless they reference a valid design token.

CSS Guidelines

- Use only design tokens (e.g., `--gap-xs`, `--font-size-sm`, `--color-primary`).
- Avoid direct values for spacing, sizes, colors, borders, shadows, etc.
- Instead of `gap: 16px`, use semantic token like `gap: var(--gap-sm)`.
- All spacing, font sizes, and layout rules must use tokenized values from the grid/t-shirt system.

Component Rules

- Props must match exactly with what is defined in the Figma specs.
- Do not add extra props or modify prop names unless explicitly instructed.
- No logic or features that are not visible or documented in the Figma spec.

Storybook Rules

- Create a `.stories.ts` file for each component.
- Every story must include `tags: ['autodocs']`.
- All props should be controllable via Storybook Controls.
- Component must respond dynamically to changes made via Storybook Controls.
- Provide at least one example for each supported variant, state, or size.
- Keep stories concise and limited to actual documented use cases only.

Behavior

- Be concise and precise in responses.
- Do exactly what is asked. Do not invent or assume.
- Do not explain the code unless explicitly asked.
- Output only the code unless told otherwise.

Checklist

- [ ] Нет Tailwind классов
- [ ] Нет хардкода
- [ ] Все токены существуют
- [ ] Все Props совпадают с Figma
- [ ] Stories созданы
- [ ] `tags: ['autodocs']` есть
- [ ] Код динамически меняется при изменении параметров в Controls
You are an expert in Vue 3 component development using Vite and Storybook 9.1, strictly adhering to a custom design system.

Code Responsibilities

- Always use Composition API.
- Use pure CSS only. No Tailwind, no preprocessors.
- Absolutely no hardcoded values (e.g., `16px`, `#3b82f6`, `rgba()`).
- Use only design tokens from the official design system.
- Do not invent token names or CSS properties.
- Do not use any styles that aren't explicitly defined in the Figma design system.
- Do not write inline styles unless they reference a valid design token.

CSS Guidelines

- Use only design tokens (e.g., `--gap-xs`, `--font-size-sm`, `--color-primary`).
- Avoid direct values for spacing, sizes, colors, borders, shadows, etc.
- Instead of `gap: 16px`, use semantic token like `gap: var(--gap-sm)`.
- All spacing, font sizes, and layout rules must use tokenized values from the grid/t-shirt system.

Component Rules

- Props must match exactly with what is defined in the Figma specs.
- Do not add extra props or modify prop names unless explicitly instructed.
- No logic or features that are not visible or documented in the Figma spec.

Storybook Rules

- Create a `.stories.ts` file for each component.
- Every story must include `tags: ['autodocs']`.
- All props should be controllable via Storybook Controls.
- Component must respond dynamically to changes made via Storybook Controls.
- Provide at least one example for each supported variant, state, or size.
- Keep stories concise and limited to actual documented use cases only.

Behavior

- Be concise and precise in responses.
- Do exactly what is asked. Do not invent or assume.
- Do not explain the code unless explicitly asked.
- Output only the code unless told otherwise.

Checklist

- [ ] Нет Tailwind классов
- [ ] Нет хардкода
- [ ] Все токены существуют
- [ ] Все Props совпадают с Figma
- [ ] Stories созданы
- [ ] `tags: ['autodocs']` есть
- [ ] Код динамически меняется при изменении параметров в Controls

## General-purpose rules

Here are some rules we've seen beta users adopt:

```
- IMPORTANT: Always use components from `\src\componentsp` when possible
- Prioritize Figma fidelity to match designs exactly
- Avoid hardcoded values, use design tokens from Figma where available
- Follow WCAG requirements for accessibility
- Place UI components in `\src\componentsp`; avoid inline styles unless truly necessary
```
### Required flow (do not skip)
1. Run get_code first to fetch the structured representation for the exact node(s).
2. If the response is too large or truncated, run get_metadata to get the high‑level node map and then re‑fetch only the required node(s) with get_code.
3. Run get_screenshot for a visual reference of the node variant being implemented.
4. Only after you have both get_code and get_screenshot, download any assets needed and start implementation.
5. Translate the output VUE3  into this project's conventions, styles and framework.  Reuse the project's color tokens, components, and typography wherever possible.
6. Validate against Figma for 1:1 look and behavior before marking complete.

### Implementation rules
- Treat the Figma MCP output VUE3 + css as a representation of design and behavior, not as final code style.
- Don't use styles Tailwind utility classes with the project's preferred utilities/design‑system tokens when applicable.
- Reuse existing components (e.g., buttons, inputs, typography, icon wrappers) instead of duplicating functionality.
- Use the project's color system, typography scale, and spacing tokens consistently.
- Respect existing routing, state management, and data‑fetch patterns already adopted in the repo.
- Strive for 1:1 visual parity with the Figma design. When conflicts arise, prefer design‑system tokens and adjust spacing or sizes minimally to match visuals.
- Validate the final UI against the Figma screenshot for both look and behavior.


- Для типографии используй компонент OTypography если есть такая возможность
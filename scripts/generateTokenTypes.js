// scripts/generateTokenTypes.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TypeScript —Ç–∏–ø–æ–≤ –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ Figma
// –ó–∞–ø—É—Å–∫: node scripts/generateTokenTypes.js

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤
const variablesData = JSON.parse(
  fs.readFileSync(
    path.resolve(__dirname, '../src/utils/Basic-variables-full.json'),
    'utf-8'
  )
);

const IGNORED_COLLECTIONS = ['EightShapes Specs', 'Specs Layout', 'content'];

function generateTypes() {
  const types = {
    themes: new Set(),
    breakpoints: new Set(),
    collections: new Map(),
    tokens: new Map()
  };

  // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –∏ —Ç–æ–∫–µ–Ω–∞—Ö
  variablesData.collections.forEach(collection => {
    if (IGNORED_COLLECTIONS.includes(collection.name)) return;

    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º—ã
    collection.modes.forEach(mode => {
      if (collection.name === 'theme') {
        types.themes.add(mode.name);
      } else if (collection.name === 'adaptive') {
        types.breakpoints.add(mode.name);
      }
    });

    // –°–æ–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤
    collection.variables.forEach(variable => {
      types.tokens.set(variable.name, {
        type: variable.resolvedType,
        collection: collection.name,
        description: variable.description || ''
      });
    });

    types.collections.set(collection.name, {
      modes: collection.modes.map(m => m.name),
      variableCount: collection.variables.length
    });
  });

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TypeScript —Ñ–∞–π–ª
  let tsContent = `// Auto-generated file. Do not edit manually.
// Generated at: ${new Date().toISOString()}

/**
 * –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
 */
export type ThemeName = ${Array.from(types.themes).map(t => `'${t}'`).join(' | ')};

/**
 * –î–æ—Å—Ç—É–ø–Ω—ã–µ breakpoints
 */
export type Breakpoint = ${Array.from(types.breakpoints).map(b => `'${b}'`).join(' | ')};

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
 */
export interface TokenModeConfig {
  /** –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è */
  theme?: ThemeName;
  /** Breakpoint –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ */
  breakpoint?: Breakpoint;
  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π */
  [collectionName: string]: string | undefined;
}

/**
 * –¢–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω–æ–≤
 */
export type TokenValue = string | number;

/**
 * –ò–º–µ–Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
 */
export type TokenName = 
${Array.from(types.tokens.keys())
  .map(name => `  | '${name}'`)
  .join('\n')};

/**
 * –¢–∏–ø—ã —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export type ColorToken = string;
export type SpacingToken = number;
export type FontSizeToken = number;
export type BorderRadiusToken = number;

/**
 * –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–ª–µ–∫—Ü–∏–π
 */
export interface CollectionInfo {
  modes: string[];
  variableCount: number;
}

export const COLLECTIONS: Record<string, CollectionInfo> = {
${Array.from(types.collections.entries())
  .map(([name, info]) => `  '${name}': {
    modes: [${info.modes.map(m => `'${m}'`).join(', ')}],
    variableCount: ${info.variableCount}
  }`)
  .join(',\n')}
};

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–µ–º
 */
export const THEMES = [${Array.from(types.themes).map(t => `'${t}'`).join(', ')}] as const;

/**
 * –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã breakpoints
 */
export const BREAKPOINTS = [${Array.from(types.breakpoints).map(b => `'${b}'`).join(', ')}] as const;

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
 */
export interface TokenInfo {
  type: string;
  collection: string;
  description: string;
}

export const TOKEN_INFO: Record<TokenName, TokenInfo> = {
${Array.from(types.tokens.entries())
  .slice(0, 50) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
  .map(([name, info]) => `  '${name}': {
    type: '${info.type}',
    collection: '${info.collection}',
    description: '${info.description.replace(/'/g, "\\'")}'
  }`)
  .join(',\n')}
  // ... –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
};
`;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
  const outputPath = path.resolve(__dirname, '../src/types/tokens.ts');
  fs.mkdirSync(path.dirname(outputPath), { recursive: true });
  fs.writeFileSync(outputPath, tsContent);

  console.log('‚úÖ TypeScript —Ç–∏–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', outputPath);
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
  - –¢–µ–º: ${types.themes.size}
  - Breakpoints: ${types.breakpoints.size}
  - –ö–æ–ª–ª–µ–∫—Ü–∏–π: ${types.collections.size}
  - –¢–æ–∫–µ–Ω–æ–≤: ${types.tokens.size}
  `);

  return types;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
try {
  generateTypes();
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤:', error);
  process.exit(1);
}
// scripts/validateTokens.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º
// –ó–∞–ø—É—Å–∫: node scripts/validateTokens.js

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const IGNORED_COLLECTIONS = ['EightShapes Specs', 'Specs Layout', 'content'];
const REQUIRED_COLLECTIONS = ['Primitive', 'Semantic', 'theme', 'adaptive'];

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
};

function log(color, ...args) {
  console.log(colors[color], ...args, colors.reset);
}

function validateTokens() {
  log('blue', '\nüîç –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤...\n');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const variablesData = JSON.parse(
    fs.readFileSync(
      path.resolve(__dirname, '../src/utils/Basic-variables-full.json'),
      'utf-8'
    )
  );

  const issues = [];
  const warnings = [];
  const stats = {
    totalCollections: 0,
    totalVariables: 0,
    totalModes: 0,
    brokenAliases: 0,
    emptyValues: 0
  };

  // –ö–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const variableMap = new Map();
  const collectionMap = new Map();

  // –°—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—ã
  variablesData.collections.forEach(collection => {
    collectionMap.set(collection.id, collection);
    collection.variables.forEach(variable => {
      variableMap.set(variable.id, variable);
    });
  });

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
  log('yellow', 'üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π...');
  const existingCollections = variablesData.collections.map(c => c.name);
  
  REQUIRED_COLLECTIONS.forEach(required => {
    if (!existingCollections.includes(required)) {
      issues.push(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: ${required}`);
    } else {
      log('green', `  ‚úì –ö–æ–ª–ª–µ–∫—Ü–∏—è "${required}" –Ω–∞–π–¥–µ–Ω–∞`);
    }
  });

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  const technicalCollections = existingCollections.filter(name => 
    IGNORED_COLLECTIONS.includes(name)
  );
  
  if (technicalCollections.length > 0) {
    log('green', `  ‚úì –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è: ${technicalCollections.join(', ')}`);
  }

  // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
  log('yellow', '\nüìä –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π...');
  
  variablesData.collections.forEach(collection => {
    if (IGNORED_COLLECTIONS.includes(collection.name)) {
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ
    }

    stats.totalCollections++;
    stats.totalModes += collection.modes.length;
    stats.totalVariables += collection.variables.length;

    log('blue', `\n  üì¶ –ö–æ–ª–ª–µ–∫—Ü–∏—è: ${collection.name}`);
    log('blue', `     –†–µ–∂–∏–º–æ–≤: ${collection.modes.length}`);
    log('blue', `     –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${collection.variables.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º—ã
    if (collection.modes.length === 0) {
      warnings.push(`‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è "${collection.name}" –Ω–µ –∏–º–µ–µ—Ç —Ä–µ–∂–∏–º–æ–≤`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    collection.variables.forEach(variable => {
      const modes = Object.keys(variable.valuesByMode);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
      if (modes.length !== collection.modes.length) {
        warnings.push(
          `‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variable.name}" –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤ (${modes.length}/${collection.modes.length})`
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      Object.entries(variable.valuesByMode).forEach(([modeId, value]) => {
        if (value === null || value === undefined) {
          stats.emptyValues++;
          issues.push(`‚ùå –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —É "${variable.name}" –≤ —Ä–µ–∂–∏–º–µ ${modeId}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–∏–∞—Å—ã
        if (value?.type === 'VARIABLE_ALIAS') {
          const aliasId = value.id;
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤
          if (!aliasId.includes('/')) {
            if (!variableMap.has(aliasId)) {
              stats.brokenAliases++;
              issues.push(
                `‚ùå –°–ª–æ–º–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É "${variable.name}": —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ${aliasId}`
              );
            }
          }
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–æ—Å—Å-JSON —Å—Å—ã–ª–æ–∫
          else if (aliasId.startsWith('VariableID:')) {
            const keyPart = aliasId.substring('VariableID:'.length, aliasId.indexOf('/'));
            const found = Array.from(variableMap.values()).some(v => v.key === keyPart);
            
            if (!found) {
              stats.brokenAliases++;
              issues.push(
                `‚ùå –°–ª–æ–º–∞–Ω–Ω–∞—è –∫—Ä–æ—Å—Å-—Å—Å—ã–ª–∫–∞ —É "${variable.name}": –∫–ª—é—á ${keyPart} –Ω–µ –Ω–∞–π–¥–µ–Ω`
              );
            }
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–∞
        if (variable.resolvedType === 'COLOR' && typeof value === 'object' && value.type !== 'VARIABLE_ALIAS') {
          const { r, g, b } = value;
          if (r < 0 || r > 1 || g < 0 || g > 1 || b < 0 || b > 1) {
            warnings.push(
              `‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ RGB –∑–Ω–∞—á–µ–Ω–∏—è —É "${variable.name}": r=${r}, g=${g}, b=${b}`
            );
          }
        }
      });
    });
  });

  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–µ—â–∏
  log('yellow', '\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
  
  const themeCollection = variablesData.collections.find(c => c.name === 'theme');
  if (themeCollection) {
    const themeNames = themeCollection.modes.map(m => m.name);
    const expectedThemes = ['blue', 'red', 'stone'];
    
    expectedThemes.forEach(theme => {
      if (themeNames.includes(theme)) {
        log('green', `  ‚úì –¢–µ–º–∞ "${theme}" –Ω–∞–π–¥–µ–Ω–∞`);
      } else {
        warnings.push(`‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º–∞—è —Ç–µ–º–∞ "${theme}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    });
  }

  const adaptiveCollection = variablesData.collections.find(c => c.name === 'adaptive');
  if (adaptiveCollection) {
    const breakpoints = adaptiveCollection.modes.map(m => m.name);
    const expectedBreakpoints = ['wide', 'desktop', 'tablet', 'mobile'];
    
    expectedBreakpoints.forEach(bp => {
      if (breakpoints.includes(bp)) {
        log('green', `  ‚úì Breakpoint "${bp}" –Ω–∞–π–¥–µ–Ω`);
      } else {
        warnings.push(`‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º—ã–π breakpoint "${bp}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    });
  }

  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  log('blue', '\n' + '='.repeat(60));
  log('blue', 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
  log('blue', '='.repeat(60));
  console.log(`–í—Å–µ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${stats.totalCollections}`);
  console.log(`–í—Å–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${stats.totalVariables}`);
  console.log(`–í—Å–µ–≥–æ —Ä–µ–∂–∏–º–æ–≤: ${stats.totalModes}`);
  console.log(`–°–ª–æ–º–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: ${stats.brokenAliases}`);
  console.log(`–ü—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${stats.emptyValues}`);

  if (warnings.length > 0) {
    log('yellow', '\n' + '='.repeat(60));
    log('yellow', '‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø');
    log('yellow', '='.repeat(60));
    warnings.forEach(w => console.log(w));
  }

  if (issues.length > 0) {
    log('red', '\n' + '='.repeat(60));
    log('red', '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´');
    log('red', '='.repeat(60));
    issues.forEach(i => console.log(i));
    log('red', '\n‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!\n');
    process.exit(1);
  } else {
    log('green', '\n' + '='.repeat(60));
    log('green', '‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!');
    log('green', '='.repeat(60));
    log('green', '\n–í—Å–µ —Ç–æ–∫–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.\n');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
try {
  validateTokens();
} catch (error) {
  log('red', '\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error.message);
  console.error(error);
  process.exit(1);
}
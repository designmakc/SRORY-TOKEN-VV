// scripts/tokenInfo.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
//   node scripts/tokenInfo.js                    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
//   node scripts/tokenInfo.js --collection theme # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
//   node scripts/tokenInfo.js --search button    # –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const args = process.argv.slice(2);
const IGNORED_COLLECTIONS = ['EightShapes Specs', 'Specs Layout', 'content'];

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
const searchTerm = args.find(arg => !arg.startsWith('--')) || null;
const collection = args.find(arg => arg.startsWith('--collection'))?.split('=')[1] || null;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(color, ...args) {
  console.log(colors[color], ...args, colors.reset);
}

function loadTokens() {
  return JSON.parse(
    fs.readFileSync(
      path.resolve(__dirname, '../src/utils/Basic-variables-full.json'),
      'utf-8'
    )
  );
}

function showGeneralInfo() {
  const data = loadTokens();
  
  log('cyan', '\n' + '='.repeat(70));
  log('cyan', 'üìä –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–ö–ï–ù–ê–•');
  log('cyan', '='.repeat(70) + '\n');

  const activeCollections = data.collections.filter(
    c => !IGNORED_COLLECTIONS.includes(c.name)
  );

  console.log(`–í—Å–µ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${activeCollections.length} (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è ${data.collections.length - activeCollections.length})`);
  console.log(`–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ${activeCollections.reduce((sum, c) => sum + c.variables.length, 0)}\n`);

  log('yellow', 'üì¶ –ö–û–õ–õ–ï–ö–¶–ò–ò:\n');

  activeCollections.forEach(collection => {
    const modes = collection.modes.map(m => m.name).join(', ');
    const defaultMode = collection.modes.find(m => m.modeId === collection.defaultModeId)?.name;
    
    log('blue', `  ${collection.name}`);
    console.log(`    ‚îú‚îÄ –¢–æ–∫–µ–Ω–æ–≤: ${collection.variables.length}`);
    console.log(`    ‚îú‚îÄ –†–µ–∂–∏–º–æ–≤: ${collection.modes.length} (${modes})`);
    console.log(`    ‚îî‚îÄ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${defaultMode}`);
    console.log('');
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
  log('yellow', 'üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú:\n');
  
  const typeStats = {};
  activeCollections.forEach(collection => {
    collection.variables.forEach(variable => {
      const type = variable.resolvedType;
      typeStats[type] = (typeStats[type] || 0) + 1;
    });
  });

  Object.entries(typeStats)
    .sort((a, b) => b[1] - a[1])
    .forEach(([type, count]) => {
      const bar = '‚ñà'.repeat(Math.ceil(count / 10));
      console.log(`    ${type.padEnd(15)} ${count.toString().padStart(4)} ${bar}`);
    });

  console.log('');
}

function showCollectionInfo(collectionName) {
  const data = loadTokens();
  const collection = data.collections.find(c => c.name === collectionName);

  if (!collection) {
    log('red', `\n‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è "${collectionName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n`);
    log('yellow', '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
    data.collections.forEach(c => console.log(`  - ${c.name}`));
    console.log('');
    return;
  }

  log('cyan', '\n' + '='.repeat(70));
  log('cyan', `üì¶ –ö–û–õ–õ–ï–ö–¶–ò–Ø: ${collection.name}`);
  log('cyan', '='.repeat(70) + '\n');

  console.log(`ID: ${collection.id}`);
  console.log(`–¢–æ–∫–µ–Ω–æ–≤: ${collection.variables.length}`);
  console.log(`–†–µ–∂–∏–º–æ–≤: ${collection.modes.length}\n`);

  log('yellow', 'üé® –†–ï–ñ–ò–ú–´:\n');
  collection.modes.forEach(mode => {
    const isDefault = mode.modeId === collection.defaultModeId ? '(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)' : '';
    console.log(`  ${mode.name.padEnd(15)} ${isDefault}`);
  });

  log('yellow', '\nüìã –¢–û–ü-20 –¢–û–ö–ï–ù–û–í:\n');
  collection.variables.slice(0, 20).forEach((variable, index) => {
    console.log(`  ${(index + 1).toString().padStart(2)}. ${variable.name}`);
    if (variable.description) {
      console.log(`      ${colors.cyan}${variable.description}${colors.reset}`);
    }
    console.log(`      –¢–∏–ø: ${variable.resolvedType}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏—è
    const firstMode = collection.modes[0];
    const value = variable.valuesByMode[firstMode.modeId];
    
    if (value?.type === 'VARIABLE_ALIAS') {
      console.log(`      –ó–Ω–∞—á–µ–Ω–∏–µ: ‚Üí —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–æ–∫–µ–Ω`);
    } else if (variable.resolvedType === 'COLOR' && typeof value === 'object') {
      const { r, g, b, a = 1 } = value;
      console.log(`      –ó–Ω–∞—á–µ–Ω–∏–µ: rgba(${Math.round(r*255)}, ${Math.round(g*255)}, ${Math.round(b*255)}, ${a})`);
    } else {
      console.log(`      –ó–Ω–∞—á–µ–Ω–∏–µ: ${JSON.stringify(value)}`);
    }
    console.log('');
  });

  if (collection.variables.length > 20) {
    console.log(`  ... –∏ –µ—â—ë ${collection.variables.length - 20} —Ç–æ–∫–µ–Ω–æ–≤\n`);
  }
}

function searchTokens(searchTerm) {
  const data = loadTokens();
  
  log('cyan', '\n' + '='.repeat(70));
  log('cyan', `üîç –ü–û–ò–°–ö: "${searchTerm}"`);
  log('cyan', '='.repeat(70) + '\n');

  let foundCount = 0;

  data.collections.forEach(collection => {
    if (IGNORED_COLLECTIONS.includes(collection.name)) return;

    const matches = collection.variables.filter(v => 
      v.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      v.description?.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (matches.length > 0) {
      log('blue', `\n  üì¶ ${collection.name} (${matches.length} –Ω–∞–π–¥–µ–Ω–æ):\n`);
      
      matches.forEach(variable => {
        console.log(`    ‚Ä¢ ${variable.name}`);
        if (variable.description) {
          console.log(`      ${colors.cyan}${variable.description}${colors.reset}`);
        }
        console.log(`      –¢–∏–ø: ${variable.resolvedType}`);
        console.log('');
        foundCount++;
      });
    }
  });

  if (foundCount === 0) {
    log('yellow', '  –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n');
  } else {
    log('green', `\n‚úì –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${foundCount}\n`);
  }
}

function showHelp() {
  log('cyan', '\n' + '='.repeat(70));
  log('cyan', 'üìö –°–ü–†–ê–í–ö–ê');
  log('cyan', '='.repeat(70) + '\n');
  
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  node scripts/tokenInfo.js [–æ–ø—Ü–∏–∏]\n');
  
  console.log('–û–ø—Ü–∏–∏:');
  console.log('  (–±–µ–∑ –æ–ø—Ü–∏–π)              –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
  console.log('  --collection <name>      –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏');
  console.log('  --search <term>          –ù–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é');
  console.log('  --help                   –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n');
  
  console.log('–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  node scripts/tokenInfo.js');
  console.log('  node scripts/tokenInfo.js --collection Semantic');
  console.log('  node scripts/tokenInfo.js --collection theme');
  console.log('  node scripts/tokenInfo.js --search button');
  console.log('  node scripts/tokenInfo.js --search "primary color"\n');
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  try {
    if (args.includes('--help') || args.includes('-h')) {
      showHelp();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ—Ä–º–∏–Ω—É
    if (searchTerm) {
      searchTokens(searchTerm);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    if (collection) {
      showCollectionInfo(collection);
      return;
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    showGeneralInfo();
    
  } catch (error) {
    log('red', '\n‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error(error);
    process.exit(1);
  }
}

main();
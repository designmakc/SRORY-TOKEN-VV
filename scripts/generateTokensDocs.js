#!/usr/bin/env node

import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º resolver –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
import { getComponentTokens, generateCSSVariables } from '../src/utils/figma-variables-resolver.js';

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
function groupTokensByCategory(tokens) {
  const categories = {
    'color': {},
    'spacing': {},
    'size': {},
    'typography': {},
    'border': {},
    'button': {},
    'input': {},
    'icon': {},
    'background': {},
    'text': {},
    'other': {}
  };

  for (const [tokenName, tokenValue] of Object.entries(tokens)) {
    const category = getTokenCategory(tokenName);
    categories[category][tokenName] = tokenValue;
  }

  // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  Object.keys(categories).forEach(category => {
    if (Object.keys(categories[category]).length === 0) {
      delete categories[category];
    }
  });

  return categories;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–∫–µ–Ω–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é
 */
function getTokenCategory(tokenName) {
  const lowerName = tokenName.toLowerCase();
  
  if (lowerName.includes('color/background')) return 'background';
  if (lowerName.includes('color/text')) return 'text';
  if (lowerName.includes('color/icon')) return 'icon';
  if (lowerName.includes('color/border')) return 'border';
  if (lowerName.includes('button')) return 'button';
  if (lowerName.includes('input')) return 'input';
  if (lowerName.includes('size/icon')) return 'icon';
  if (lowerName.includes('size/')) return 'size';
  if (lowerName.includes('typography/')) return 'typography';
  if (lowerName.includes('padding/') || lowerName.includes('gap/')) return 'spacing';
  if (lowerName.includes('color/')) return 'color';
  
  return 'other';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
 */
function getTokenDescription(tokenName, tokenValue) {
  const descriptions = {
    // Colors
    'color/background': '–§–æ–Ω–æ–≤—ã–π —Ü–≤–µ—Ç',
    'color/text': '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞',
    'color/border': '–¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã',
    'color/icon': '–¶–≤–µ—Ç –∏–∫–æ–Ω–∫–∏',
    
    // Button
    'button/primary': '–û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞',
    'button/secondary': '–í—Ç–æ—Ä–∏—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞',
    'button/ghost': '–ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞',
    'button/outline': '–ö–Ω–æ–ø–∫–∞ —Å –æ–±–≤–æ–¥–∫–æ–π',
    
    // Sizes
    'size/icon': '–†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏',
    'size/input': '–†–∞–∑–º–µ—Ä –ø–æ–ª—è –≤–≤–æ–¥–∞',
    'size/main': '–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ä',
    
    // Typography
    'typography/font-size': '–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞',
    'typography/font-weight': '–¢–æ–ª—â–∏–Ω–∞ —à—Ä–∏—Ñ—Ç–∞',
    'typography/line-height': '–í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏',
    'typography/letter-spacing': '–ú–µ–∂–±—É–∫–≤–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ',
    
    // Spacing
    'padding': '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã',
    'gap': '–ü—Ä–æ–º–µ–∂—É—Ç–∫–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏',
    
    // States
    'default': '–û–±—ã—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
    'hover': '–ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏',
    'active': '–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏',
    'focus': '–ü—Ä–∏ —Ñ–æ–∫—É—Å–µ',
    'disabled': '–û—Ç–∫–ª—é—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
    'error': '–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏',
    'success': '–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—Ö–∞',
    'warning': '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
  };

  // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  for (const [pattern, description] of Object.entries(descriptions)) {
    if (tokenName.includes(pattern)) {
      return description;
    }
  }

  return '–¢–æ–∫–µ–Ω –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
 */
function getTokenType(tokenName, tokenValue) {
  if (typeof tokenValue === 'string') {
    if (tokenValue.startsWith('rgb') || tokenValue.startsWith('rgba')) {
      return 'Color';
    }
    if (tokenValue.includes('px')) {
      return 'Size';
    }
    if (tokenValue.includes('rem') || tokenValue.includes('em')) {
      return 'Size';
    }
    return 'String';
  }
  
  if (typeof tokenValue === 'number') {
    return 'Number';
  }
  
  return 'Unknown';
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
 */
function generateUsageExample(tokenName, tokenValue) {
  const cssVarName = `--${tokenName.replace(/\//g, '-')}`;
  
  if (tokenName.includes('color/background')) {
    return `background-color: var(${cssVarName});`;
  }
  
  if (tokenName.includes('color/text')) {
    return `color: var(${cssVarName});`;
  }
  
  if (tokenName.includes('color/border')) {
    return `border-color: var(${cssVarName});`;
  }
  
  if (tokenName.includes('size/icon')) {
    return `width: var(${cssVarName});\nheight: var(${cssVarName});`;
  }
  
  if (tokenName.includes('padding/')) {
    return `padding: var(${cssVarName});`;
  }
  
  if (tokenName.includes('gap/')) {
    return `gap: var(${cssVarName});`;
  }
  
  if (tokenName.includes('typography/font-size')) {
    return `font-size: var(${cssVarName});`;
  }
  
  if (tokenName.includes('typography/font-weight')) {
    return `font-weight: var(${cssVarName});`;
  }
  
  if (tokenName.includes('typography/line-height')) {
    return `line-height: var(${cssVarName});`;
  }
  
  if (tokenName.includes('border-radius')) {
    return `border-radius: var(${cssVarName});`;
  }
  
  return `var(${cssVarName})`;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Markdown –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
 */
function generateMarkdownDocs(categories) {
  let markdown = `# üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ Design Tokens

> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ Figma
> 
> **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** ${new Date().toLocaleString('ru-RU')}
> 
> **–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤:** ${Object.values(categories).reduce((total, category) => total + Object.keys(category).length, 0)}

## üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ

`;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
  Object.keys(categories).forEach(category => {
    const categoryName = getCategoryDisplayName(category);
    const tokenCount = Object.keys(categories[category]).length;
    markdown += `- [${categoryName}](#${category}) (${tokenCount} —Ç–æ–∫–µ–Ω–æ–≤)\n`;
  });

  markdown += `\n---\n\n`;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  Object.entries(categories).forEach(([category, tokens]) => {
    const categoryName = getCategoryDisplayName(category);
    const tokenCount = Object.keys(tokens).length;
    
    markdown += `## ${categoryName} {#${category}}\n\n`;
    markdown += `**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:** ${tokenCount}\n\n`;

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const subcategories = groupTokensBySubcategory(tokens);
    
    Object.entries(subcategories).forEach(([subcategory, subTokens]) => {
      if (subcategory !== 'general') {
        markdown += `### ${subcategory}\n\n`;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
      const sortedTokens = Object.entries(subTokens).sort(([a], [b]) => a.localeCompare(b));
      
      markdown += `| –¢–æ–∫–µ–Ω | –ó–Ω–∞—á–µ–Ω–∏–µ | –¢–∏–ø | –û–ø–∏—Å–∞–Ω–∏–µ | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ |\n`;
      markdown += `|-------|----------|-----|----------|---------------|\n`;

      sortedTokens.forEach(([tokenName, tokenValue]) => {
        const cssVarName = `--${tokenName.replace(/\//g, '-')}`;
        const description = getTokenDescription(tokenName, tokenValue);
        const type = getTokenType(tokenName, tokenValue);
        const usage = generateUsageExample(tokenName, tokenValue);

        markdown += `| \`${cssVarName}\` | \`${tokenValue}\` | ${type} | ${description} | \`${usage}\` |\n`;
      });

      markdown += `\n`;
    });

    markdown += `---\n\n`;
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  markdown += `## üöÄ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

### –í Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö

\`\`\`vue
<template>
  <button class="my-button">
    –ö–Ω–æ–ø–∫–∞
  </button>
</template>

<style scoped>
.my-button {
  background-color: var(--color-background-button-primary-default);
  color: var(--color-text-on-interactive-primary);
  padding: var(--padding-md);
  border-radius: var(--border-radius-md);
  font-size: var(--typography-font-size-header-sm);
}
</style>
\`\`\`

### –í CSS

\`\`\`css
.card {
  background-color: var(--color-background-section-lvl-2-default);
  padding: var(--padding-lg);
  border-radius: var(--border-radius-lg);
  border: 1px solid var(--color-border-primary);
}

.card-title {
  color: var(--color-text-primary);
  font-size: var(--typography-font-size-header-md);
  font-weight: var(--typography-font-weight-header-md);
}
\`\`\`

### –í JavaScript

\`\`\`javascript
import { useDesignTokens } from '@/composables/useDesignTokens';

export default {
  setup() {
    const { getToken } = useDesignTokens();
    
    const primaryColor = getToken('color/background/button/primary/default');
    const textColor = getToken('color/text/primary');
    
    return { primaryColor, textColor };
  }
}
\`\`\`

## üîç –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:

\`\`\`bash
npm run tokens:info --search "button"
npm run tokens:info --search "color"
npm run tokens:info --search "size"
\`\`\`

## üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ \`Basic-variables-full.json\`:

\`\`\`bash
npm run tokens:generate-docs
\`\`\`

---

*–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π Design Tokens*
`;

  return markdown;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function getCategoryDisplayName(category) {
  const names = {
    'color': 'üé® –¶–≤–µ—Ç–∞',
    'spacing': 'üìè –û—Ç—Å—Ç—É–ø—ã –∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏',
    'size': 'üìê –†–∞–∑–º–µ—Ä—ã',
    'typography': '‚úçÔ∏è –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞',
    'border': 'üî≤ –ì—Ä–∞–Ω–∏—Ü—ã',
    'button': 'üîò –ö–Ω–æ–ø–∫–∏',
    'input': 'üìù –ü–æ–ª—è –≤–≤–æ–¥–∞',
    'icon': 'üéØ –ò–∫–æ–Ω–∫–∏',
    'background': 'üñºÔ∏è –§–æ–Ω—ã',
    'text': 'üìÑ –¢–µ–∫—Å—Ç',
    'other': 'üîß –ü—Ä–æ—á–∏–µ'
  };
  
  return names[category] || category;
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω—ã –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
function groupTokensBySubcategory(tokens) {
  const subcategories = {
    'general': {}
  };

  Object.entries(tokens).forEach(([tokenName, tokenValue]) => {
    const parts = tokenName.split('/');
    
    if (parts.length >= 2) {
      const subcategory = parts[1];
      if (!subcategories[subcategory]) {
        subcategories[subcategory] = {};
      }
      subcategories[subcategory][tokenName] = tokenValue;
    } else {
      subcategories['general'][tokenName] = tokenValue;
    }
  });

  return subcategories;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */
async function generateTokensDocs() {
  try {
    console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (semantic + component)
    const tokens = getComponentTokens();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${Object.keys(tokens).length} —Ç–æ–∫–µ–Ω–æ–≤ (semantic + component)`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = groupTokensByCategory(tokens);
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–æ ${Object.keys(categories).length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Markdown
    const markdown = generateMarkdownDocs(categories);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é docs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const docsDir = path.join(__dirname, '..', 'docs');
    if (!fs.existsSync(docsDir)) {
      fs.mkdirSync(docsDir, { recursive: true });
      console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è docs/');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const outputPath = path.join(docsDir, 'AVAILABLE_TOKENS.md');
    fs.writeFileSync(outputPath, markdown, 'utf8');
    
    console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${outputPath}`);
    console.log(`üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(markdown.length / 1024).toFixed(2)} KB`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    Object.entries(categories).forEach(([category, tokens]) => {
      const count = Object.keys(tokens).length;
      const percentage = ((count / Object.keys(tokens).length) * 100).toFixed(1);
      console.log(`  ${getCategoryDisplayName(category)}: ${count} —Ç–æ–∫–µ–Ω–æ–≤`);
    });
    
    console.log('\nüéâ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateTokensDocs();

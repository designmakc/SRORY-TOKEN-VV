// scripts/componentAudit.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–∫–µ–Ω–∞–º
// –ó–∞–ø—É—Å–∫: node scripts/componentAudit.js --component src/components/OCheckbox.vue --tokens review-tokens/checkbox_tokens.json

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

function log(color, ...args) {
  console.log(colors[color], ...args, colors.reset);
}

function auditComponent() {
  // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const args = process.argv.slice(2);
  
  let componentPath, tokensPath;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
  const componentIndex = args.indexOf('--component');
  const tokensIndex = args.indexOf('--tokens');
  
  if (componentIndex !== -1 && tokensIndex !== -1) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º --component –∏ --tokens
    componentPath = args[componentIndex + 1];
    tokensPath = args[tokensIndex + 1];
  } else if (args.length >= 2) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    componentPath = args[0];
    tokensPath = args[1];
  } else {
    log('red', '‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º');
    log('yellow', '–ü—Ä–∏–º–µ—Ä—ã:');
    log('yellow', '  npm run tokens:audit -- --component src/components/OCheckbox.vue --tokens review-tokens/checkbox_tokens.json');
    log('yellow', '  npm run tokens:audit -- src/components/OCheckbox.vue review-tokens/checkbox_tokens.json');
    process.exit(1);
  }

  if (!componentPath || !tokensPath) {
    log('red', '‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º');
    process.exit(1);
  }

  log('blue', '\nüîç –ù–ê–ß–ò–ù–ê–ï–ú –ê–£–î–ò–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–ê...\n');

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    const componentContent = fs.readFileSync(
      path.resolve(__dirname, '..', componentPath),
      'utf-8'
    );

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    const tokensData = JSON.parse(
      fs.readFileSync(
        path.resolve(__dirname, '..', tokensPath),
        'utf-8'
      )
    );

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ç–æ–∫–µ–Ω–æ–≤
    const variablesData = JSON.parse(
      fs.readFileSync(
        path.resolve(__dirname, '../src/utils/Basic-variables-full.json'),
        'utf-8'
      )
    );

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const tokenMap = new Map();
    variablesData.collections.forEach(collection => {
      collection.variables.forEach(variable => {
        const fullName = `${collection.name}/${variable.name}`;
        tokenMap.set(fullName, {
          ...variable,
          collection: collection.name,
          collectionId: collection.id
        });
      });
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤
    const expectedTokens = new Set();
    if (tokensData.tokensPreview) {
      tokensData.tokensPreview.forEach(token => {
        expectedTokens.add(token.token);
      });
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const cssVariables = new Set();
    const hardcodedValues = [];
    
    // –ò—â–µ–º var(--token-name)
    const varMatches = componentContent.match(/var\(--[^)]+\)/g) || [];
    varMatches.forEach(match => {
      const tokenName = match.replace('var(--', '').replace(')', '');
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
      // --checkbox-border-radius -> component/checkbox/border-radius
      // --color-border-interactive-default -> semantic/color/border/interactive/default
      const tokenFormat = tokenName.replace(/-/g, '/');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
      let fullTokenName = tokenFormat;
      if (tokenFormat.startsWith('checkbox/')) {
        fullTokenName = `component/${tokenFormat}`;
      } else if (tokenFormat.startsWith('color/') || tokenFormat.startsWith('gap/') || 
                 tokenFormat.startsWith('padding/') || tokenFormat.startsWith('typography/')) {
        fullTokenName = `semantic/${tokenFormat}`;
      } else if (tokenFormat.startsWith('typography/font-family/')) {
        fullTokenName = `primitive/${tokenFormat}`;
      }
      
      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ (–∫–∞–∫ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ)
      cssVariables.add(tokenFormat);
      
      cssVariables.add(fullTokenName);
    });

    // –ò—â–µ–º —Ö–∞—Ä–¥–∫–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è
    const hardcodedMatches = componentContent.match(/(#[0-9a-fA-F]{3,6}|[0-9]+(px|rem|em|%|vh|vw))/g) || [];
    hardcodedMatches.forEach(match => {
      // –ò—Å–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ var() –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      if (!match.includes('var(') && !match.includes('/*')) {
        hardcodedValues.push(match);
      }
    });

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    log('cyan', '\nüîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
    log('blue', `  –û–∂–∏–¥–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${expectedTokens.size}`);
    log('blue', `  –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${cssVariables.size}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const expectedArray = Array.from(expectedTokens).slice(0, 5);
    const usedArray = Array.from(cssVariables).slice(0, 5);
    log('green', `  –û–∂–∏–¥–∞–µ–º—ã–µ (–ø–µ—Ä–≤—ã–µ 5): ${expectedArray.join(', ')}`);
    log('yellow', `  –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ (–ø–µ—Ä–≤—ã–µ 5): ${usedArray.join(', ')}`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    const usedTokens = new Set();
    const unusedExpectedTokens = new Set();
    const invalidTokens = new Set();
    const missingTokens = new Set();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã
    cssVariables.forEach(token => {
      if (expectedTokens.has(token)) {
        usedTokens.add(token);
      } else {
        invalidTokens.add(token);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã
    expectedTokens.forEach(token => {
      if (!cssVariables.has(token)) {
        missingTokens.add(token);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
    const systemValidTokens = new Set();
    const systemInvalidTokens = new Set();

    cssVariables.forEach(token => {
      if (tokenMap.has(token)) {
        systemValidTokens.add(token);
      } else {
        systemInvalidTokens.add(token);
      }
    });

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log('cyan', `\nüìÑ –ê–£–î–ò–¢ –ö–û–ú–ü–û–ù–ï–ù–¢–ê: ${path.basename(componentPath)}`);
    log('cyan', '='.repeat(60));

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    log('blue', '\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    log('green', `  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω–æ–≤: ${usedTokens.size}`);
    log('yellow', `  ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${missingTokens.size}`);
    log('red', `  ‚ùå –ù–µ–≤–µ—Ä–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: ${invalidTokens.size}`);
    log('red', `  ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ: ${systemInvalidTokens.size}`);
    log('yellow', `  ‚ö†Ô∏è  –•–∞—Ä–¥–∫–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π: ${hardcodedValues.length}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã
    if (usedTokens.size > 0) {
      log('green', '\n  ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –¢–û–ö–ï–ù–´:');
      usedTokens.forEach(token => {
        const tokenInfo = tokenMap.get(token);
        log('green', `    ‚Ä¢ ${token} (${tokenInfo?.resolvedType || 'unknown'})`);
      });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã
    if (missingTokens.size > 0) {
      log('yellow', '\n  ‚ö†Ô∏è  –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –û–ñ–ò–î–ê–ï–ú–´–ï –¢–û–ö–ï–ù–´:');
      missingTokens.forEach(token => {
        log('yellow', `    ‚Ä¢ ${token}`);
      });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    if (invalidTokens.size > 0) {
      log('red', '\n  ‚ùå –ù–ï–í–ï–†–ù–´–ï –¢–û–ö–ï–ù–´ (–Ω–µ –∏–∑ —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤):');
      invalidTokens.forEach(token => {
        log('red', `    ‚Ä¢ ${token}`);
      });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ —Ç–æ–∫–µ–Ω—ã
    if (systemInvalidTokens.size > 0) {
      log('red', '\n  ‚ùå –ù–ï–í–ê–õ–ò–î–ù–´–ï –í –°–ò–°–¢–ï–ú–ï –¢–û–ö–ï–ù–´:');
      systemInvalidTokens.forEach(token => {
        log('red', `    ‚Ä¢ ${token}`);
      });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–¥–∫–æ–¥
    if (hardcodedValues.length > 0) {
      log('yellow', '\n  ‚ö†Ô∏è  –•–ê–†–î–ö–û–î –ó–ù–ê–ß–ï–ù–ò–Ø:');
      hardcodedValues.forEach(value => {
        log('yellow', `    ‚Ä¢ ${value}`);
      });
    }

    // –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    const totalExpected = expectedTokens.size;
    const usedExpected = usedTokens.size;
    const compliancePercentage = totalExpected > 0 ? (usedExpected / totalExpected * 100) : 0;

    log('blue', '\nüìà –û–¶–ï–ù–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:');
    
    if (compliancePercentage === 100) {
      log('green', `  üéâ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: ${compliancePercentage.toFixed(1)}% - –ò–î–ï–ê–õ–¨–ù–û!`);
    } else if (compliancePercentage >= 80) {
      log('yellow', `  ‚ö†Ô∏è  –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: ${compliancePercentage.toFixed(1)}% - –•–û–†–û–®–û`);
    } else {
      log('red', `  ‚ùå –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï: ${compliancePercentage.toFixed(1)}% - –¢–†–ï–ë–£–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø`);
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    log('cyan', '\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    
    if (missingTokens.size > 0) {
      log('yellow', '‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
    }
    
    if (invalidTokens.size > 0) {
      log('red', '‚Ä¢ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤');
    }
    
    if (systemInvalidTokens.size > 0) {
      log('red', '‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
    }
    
    if (hardcodedValues.length > 0) {
      log('yellow', '‚Ä¢ –ó–∞–º–µ–Ω–∏—Ç–µ —Ö–∞—Ä–¥–∫–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ç–æ–∫–µ–Ω—ã');
    }
    
    if (compliancePercentage === 100 && hardcodedValues.length === 0) {
      log('green', '‚Ä¢ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω–∞–º!');
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    log('blue', '\n' + '='.repeat(60));
    
    if (compliancePercentage === 100 && hardcodedValues.length === 0 && systemInvalidTokens.size === 0) {
      log('green', 'üéâ –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –¢–û–ö–ï–ù–ê–ú!');
    } else if (compliancePercentage >= 80 && hardcodedValues.length === 0) {
      log('yellow', '‚ö†Ô∏è  –ö–û–ú–ü–û–ù–ï–ù–¢ –í –û–°–ù–û–í–ù–û–ú –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢, –ù–û –ï–°–¢–¨ –ó–ê–ú–ï–ß–ê–ù–ò–Ø');
    } else {
      log('red', '‚ùå –ö–û–ú–ü–û–ù–ï–ù–¢ –¢–†–ï–ë–£–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø');
    }

    log('blue', '='.repeat(60));

  } catch (error) {
    log('red', `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${error.message}`);
    console.error(error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
try {
  auditComponent();
} catch (error) {
  log('red', '\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ:', error.message);
  console.error(error);
  process.exit(1);
}

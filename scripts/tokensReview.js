// scripts/tokensReview.js
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  bright: '\x1b[1m',
};

function log(color, ...args) {
  console.log(colors[color], ...args, colors.reset);
}

// –í–∏—Ç—è–≥—É—î CSS –∑–º—ñ–Ω–Ω—ñ –∑ Vue —Ñ–∞–π–ª—É
function extractCSSVariablesFromVue(vueFilePath) {
  const content = fs.readFileSync(vueFilePath, 'utf-8');
  const cssVariables = new Set();
  
  // –®—É–∫–∞—î–º–æ –≤—Å—ñ var(--...) —É <style>
  const varRegex = /var\(--([a-z0-9-]+)\)/gi;
  let match;
  
  while ((match = varRegex.exec(content)) !== null) {
    cssVariables.add(match[1]); // –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É --
  }
  
  return cssVariables;
}

// –ö–æ–Ω–≤–µ—Ä—Ç—É—î —Ç–æ–∫–µ–Ω Figma –≤ CSS –∑–º—ñ–Ω–Ω—É (–ë–ï–ó –ø—Ä–µ—Ñ—ñ–∫—Å—É –∫–æ–ª–µ–∫—Ü—ñ—ó)
function tokenToCSSVar(token) {
  // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å –∫–æ–ª–µ–∫—Ü—ñ—ó (component/, semantic/, primitive/)
  let cleanToken = token;
  if (token.startsWith('component/')) {
    cleanToken = token.substring('component/'.length);
  } else if (token.startsWith('semantic/')) {
    cleanToken = token.substring('semantic/'.length);
  } else if (token.startsWith('primitive/')) {
    cleanToken = token.substring('primitive/'.length);
  }
  
  // 1. CamelCase ‚Üí kebab-case
  const kebabCase = cleanToken.replace(/([a-z0-9])([A-Z])/g, '$1-$2');
  // 2. –ó–∞–º—ñ–Ω—é—î–º–æ —Å–ª—ç—à–∏ –Ω–∞ –¥–µ—Ñ—ñ—Å–∏
  const cssName = kebabCase.replace(/\//g, '-').toLowerCase();
  return cssName;
}

function reviewTokens() {
  const args = process.argv.slice(2);
  
  if (args.length < 2) {
    log('red', '‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:');
    log('yellow', '  npm run tokens:review -- review-tokens/checkbox_tokens.json src/components/OCheckbox.vue');
    process.exit(1);
  }
  
  const figmaJsonPath = path.resolve(__dirname, '..', args[0]);
  const vueFilePath = path.resolve(__dirname, '..', args[1]);
  
  if (!fs.existsSync(figmaJsonPath)) {
    log('red', `‚ùå –§–∞–π–ª Figma –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${figmaJsonPath}`);
    process.exit(1);
  }
  
  if (!fs.existsSync(vueFilePath)) {
    log('red', `‚ùå Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${vueFilePath}`);
    process.exit(1);
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
  const figmaData = JSON.parse(fs.readFileSync(figmaJsonPath, 'utf-8'));
  
  // –í–∏—Ç—è–≥—É—î–º–æ CSS –∑–º—ñ–Ω–Ω—ñ –∑ Vue
  const vueTokens = extractCSSVariablesFromVue(vueFilePath);

  log('cyan', '\n' + '='.repeat(70));
  log('cyan', 'üîç –ü–ï–†–ï–í–Ü–†–ö–ê –¢–û–ö–ï–ù–Ü–í –£ VUE –ö–û–ú–ü–û–ù–ï–ù–¢–Ü');
  log('cyan', '='.repeat(70));
  log('blue', `\nüìÑ Figma JSON: ${args[0]}`);
  log('blue', `üìÑ Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${args[1]}`);

  // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É —Ç–æ–∫–µ–Ω—ñ–≤ –∑ Figma
  const figmaTokensMap = new Map();
  if (figmaData.tokensPreview && Array.isArray(figmaData.tokensPreview)) {
    figmaData.tokensPreview.forEach(token => {
      if (token.token) {
        const cssVar = tokenToCSSVar(token.token);
        figmaTokensMap.set(cssVar, {
          fullName: token.token,
          type: token.type,
          usageCount: token.usageCount
        });
      }
    });
  }

  log('blue', `\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  log('blue', `  üì¶ –¢–æ–∫–µ–Ω—ñ–≤ —É Figma: ${figmaTokensMap.size}`);
  log('blue', `  üíª –¢–æ–∫–µ–Ω—ñ–≤ —É Vue: ${vueTokens.size}`);

  // –ê–ù–ê–õ–Ü–ó 1: –¢–æ–∫–µ–Ω–∏ —É Vue, —è–∫—ñ —î –≤ Figma ‚úÖ
  const correctTokens = [];
  vueTokens.forEach(cssVar => {
    if (figmaTokensMap.has(cssVar)) {
      const figmaToken = figmaTokensMap.get(cssVar);
      correctTokens.push({
        cssVar,
        figmaToken: figmaToken.fullName,
        usageCount: figmaToken.usageCount
      });
    }
  });

  // –ê–ù–ê–õ–Ü–ó 2: –¢–æ–∫–µ–Ω–∏ —É Vue, —è–∫–∏—Ö –ù–ï–ú–ê–Ñ –≤ Figma ‚ùå
  const notInFigma = [];
  vueTokens.forEach(cssVar => {
    if (!figmaTokensMap.has(cssVar)) {
      notInFigma.push(cssVar);
    }
  });

  // –ê–ù–ê–õ–Ü–ó 3: –¢–æ–∫–µ–Ω–∏ –∑ Figma, —è–∫—ñ –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —É Vue ‚ö†Ô∏è
  const notUsedInVue = [];
  figmaTokensMap.forEach((data, cssVar) => {
    if (!vueTokens.has(cssVar)) {
      notUsedInVue.push({
        cssVar,
        figmaToken: data.fullName,
        usageCount: data.usageCount
      });
    }
  });

  // –í–ò–í–ï–î–ï–ù–ù–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í

  log('green', `\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û –í–ò–ö–û–†–ò–°–¢–ê–ù–Ü (${correctTokens.length}):`);
  log('green', '   –¶—ñ —Ç–æ–∫–µ–Ω–∏ —î –≤ Figma —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —É Vue\n');
  if (correctTokens.length > 0) {
    correctTokens.forEach(item => {
      log('green', `   ‚Ä¢ --${item.cssVar}`);
      log('green', `     Figma: ${item.figmaToken}`);
      log('green', `     –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å —É Figma: ${item.usageCount}x`);
    });
  } else {
    log('red', '   –ù–µ–º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤!');
  }

  log('red', `\n‚ùå –í–ò–ö–û–†–ò–°–¢–ê–ù–Ü –£ VUE, –ê–õ–ï –ù–ï–ú–ê–Ñ –í FIGMA (${notInFigma.length}):`);
  log('red', '   –¶—ñ —Ç–æ–∫–µ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —É Vue, –∞–ª–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ Figma JSON\n');
  if (notInFigma.length > 0) {
    notInFigma.forEach(cssVar => {
      log('red', `   ‚Ä¢ --${cssVar}`);
      log('yellow', `     ‚ö†Ô∏è  –ú–æ–∂–ª–∏–≤–æ —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ –≤ Figma –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ Vue`);
    });
  } else {
    log('green', '   –ù–µ–º–∞—î —Ç–∞–∫–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ - –≤—ñ–¥–º—ñ–Ω–Ω–æ!');
  }

  log('yellow', `\n‚ö†Ô∏è  –Ñ –í FIGMA, –ê–õ–ï –ù–ï –í–ò–ö–û–†–ò–°–¢–ê–ù–Ü –£ VUE (${notUsedInVue.length}):`);
  log('yellow', '   –¶—ñ —Ç–æ–∫–µ–Ω–∏ —î –≤ Figma, –∞–ª–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —É Vue\n');
  if (notUsedInVue.length > 0) {
    notUsedInVue.forEach(item => {
      log('yellow', `   ‚Ä¢ --${item.cssVar}`);
      log('yellow', `     Figma: ${item.figmaToken}`);
      log('yellow', `     –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å —É Figma: ${item.usageCount}x`);
      log('yellow', `     üí° –î–æ–¥–∞–π—Ç–µ —Ü–µ–π —Ç–æ–∫–µ–Ω —É Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç`);
    });
  } else {
    log('green', '   –í—Å—ñ —Ç–æ–∫–µ–Ω–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ - –≤—ñ–¥–º—ñ–Ω–Ω–æ!');
  }

  // –ó–ê–ì–ê–õ–¨–ù–ê –û–¶–Ü–ù–ö–ê
  const totalExpected = figmaTokensMap.size;
  const correctUsage = correctTokens.length;
  const readiness = totalExpected > 0 ? (correctUsage / totalExpected * 100) : 100;

  log('cyan', `\n${'‚îÄ'.repeat(70)}`);
  
  if (readiness === 100 && notInFigma.length === 0) {
    log('green', colors.bright + `üéâ –ì–û–¢–û–í–ù–Ü–°–¢–¨: ${readiness.toFixed(1)}% - –Ü–î–ï–ê–õ–¨–ù–û!`);
    log('green', '‚úÖ –í—Å—ñ —Ç–æ–∫–µ–Ω–∏ –∑ Figma –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    log('green', '‚úÖ –ù–µ–º–∞—î –∑–∞–π–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ —É Vue');
  } else if (readiness >= 80) {
    log('yellow', colors.bright + `‚ö†Ô∏è  –ì–û–¢–û–í–ù–Ü–°–¢–¨: ${readiness.toFixed(1)}%`);
    if (notUsedInVue.length > 0) {
      log('yellow', `‚ö†Ô∏è  –î–æ–¥–∞–π—Ç–µ ${notUsedInVue.length} —Ç–æ–∫–µ–Ω—ñ–≤ —É Vue`);
    }
    if (notInFigma.length > 0) {
      log('yellow', `‚ö†Ô∏è  –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ ${notInFigma.length} —Ç–æ–∫–µ–Ω—ñ–≤ (–Ω–µ–º–∞—î –≤ Figma)`);
    }
  } else {
    log('red', colors.bright + `‚ùå –ì–û–¢–û–í–ù–Ü–°–¢–¨: ${readiness.toFixed(1)}%`);
    log('red', `‚ùå ${notUsedInVue.length} —Ç–æ–∫–µ–Ω—ñ–≤ –∑ Figma –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ`);
    if (notInFigma.length > 0) {
      log('red', `‚ùå ${notInFigma.length} —Ç–æ–∫–µ–Ω—ñ–≤ —É Vue –Ω–µ–º–∞—î –≤ Figma`);
    }
  }

  log('cyan', '='.repeat(70) + '\n');
}

try {
  reviewTokens();
} catch (error) {
  log('red', '\n‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message);
  console.error(error.stack);
  process.exit(1);
}
import variablesData from './Basic-variables-full.json' with { type: 'json' };

// üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è üîß
const allVariableData = [variablesData];

// –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
const IGNORED_COLLECTIONS = [
  'EightShapes Specs',
  'Specs Layout',
  'content'
];

// –ò–µ—Ä–∞—Ä—Ö–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
// - primitive/theme/adaptive: –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö)
// - semantic: –æ–±—â–∏–µ —Ç–æ–∫–µ–Ω—ã, —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –±–∞–∑–æ–≤—ã–µ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö)
// - component: —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ semantic (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö)
const COLLECTION_HIERARCHY = {
  SEMANTIC: 'semantic',
  THEME: 'theme',
  ADAPTIVE: 'adaptive',
  PRIMITIVE: 'primitive'
};

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–∫–µ–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
const COMPONENT_COLLECTION_PATTERNS = [
  'component',
  'components',
  /Component$/i
];

// üîß –ù–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –ù–ò–ñ–ï –≠–¢–û–ô –õ–ò–ù–ò–ò üîß

// –û—Å–Ω–æ–≤–Ω—ã–µ lookup –∫–∞—Ä—Ç—ã
const variableMap = new Map();
const collectionMap = new Map();
const modeMap = new Map();
const collectionNameToId = new Map();
const keyMap = new Map();

// –ö—ç—à –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
const resolveCache = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö
function processCollections(collections) {
  collections.forEach(collection => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (IGNORED_COLLECTIONS.includes(collection.name)) {
      return;
    }

    collectionMap.set(collection.id, collection);
    collectionNameToId.set(collection.name, collection.id);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É mode –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const modes = {};
    collection.modes.forEach(mode => {
      modes[mode.name] = mode.modeId;
    });
    modeMap.set(collection.name, modes);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–∞—Ä—Ç—ã
    collection.variables.forEach(variable => {
      variableMap.set(variable.id, variable);
      keyMap.set(variable.key, variable);
    });
  });
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤
allVariableData.forEach(jsonData => {
  if (jsonData?.collections) {
    processCollections(jsonData.collections);
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ –∏—Ö —Ä–µ–∂–∏–º–æ–≤
function getAvailableCollections() {
  const collections = {};
  for (const [collectionName, modes] of modeMap.entries()) {
    const collection = collectionMap.get(collectionNameToId.get(collectionName));
    collections[collectionName] = {
      modes: Object.keys(modes),
      defaultMode: collection.modes.find(m => m.modeId === collection.defaultModeId)?.name,
      id: collection.id,
      isCore: Object.values(COLLECTION_HIERARCHY).includes(collectionName)
    };
  }
  return collections;
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–º–µ–Ω —Ä–µ–∂–∏–º–æ–≤ –≤ ID —Å —É–º–Ω—ã–º–∏ –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
function resolveModeIds(modeConfig = {}) {
  const resolvedModes = {};
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏ breakpoint –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  const { theme, breakpoint, ...customModes } = modeConfig;
  
  for (const [collectionName, availableModes] of modeMap.entries()) {
    const collection = collectionMap.get(collectionNameToId.get(collectionName));
    let modeId;
    
    // –î–ª—è Primitive –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    if (collectionName === COLLECTION_HIERARCHY.PRIMITIVE) {
      modeId = collection.defaultModeId;
    }
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
    else if (collectionName === COLLECTION_HIERARCHY.THEME && theme) {
      modeId = availableModes[theme] || collection.defaultModeId;
    } else if (collectionName === COLLECTION_HIERARCHY.ADAPTIVE && breakpoint) {
      modeId = availableModes[breakpoint] || collection.defaultModeId;
    } else if (customModes[collectionName]) {
      modeId = availableModes[customModes[collectionName]] || collection.defaultModeId;
    } else {
      modeId = collection.defaultModeId;
    }
    
    resolvedModes[collectionName] = modeId;
  }
  
  return resolvedModes;
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RGB –≤ CSS
function rgbaToCSS(colorObj) {
  if (typeof colorObj !== 'object' || colorObj.type === 'VARIABLE_ALIAS') {
    return colorObj;
  }
  
  const { r, g, b, a = 1 } = colorObj;
  const red = Math.round(r * 255);
  const green = Math.round(g * 255);
  const blue = Math.round(b * 255);
  
  return a === 1 
    ? `rgb(${red}, ${green}, ${blue})`
    : `rgba(${red}, ${green}, ${blue}, ${a})`;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è –∫ —Ç–æ–∫–µ–Ω–∞–º
function addUnits(value, variableName, resolvedType) {
  // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ - –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
  if (typeof value === 'string') return value;
  
  // –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ - –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å
  if (typeof value !== 'number') return value;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã –ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –ø–æ –∏–º–µ–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –∏ —Ç–∏–ø—É
  const name = variableName.toLowerCase();
  
  // –¢–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –µ–¥–∏–Ω–∏—Ü—ã
  const noUnitsPatterns = [
    'opacity',
    'font-weight',
    'line-height',
    'z-index',
    'flex',
    'order',
    'scale',
    'ratio',
    'count',
    'index'
  ];
  
  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è border —Ç–æ–∫–µ–Ω–æ–≤ - –æ–Ω–∏ –î–û–õ–ñ–ù–´ –∏–º–µ—Ç—å –µ–¥–∏–Ω–∏—Ü—ã
  if (name.includes('border-width') || name.includes('border-radius')) {
    return `${value}px`;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑ –µ–¥–∏–Ω–∏—Ü
  if (noUnitsPatterns.some(pattern => name.includes(pattern))) {
    return value;
  }
  
  // –¢–æ–∫–µ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å px (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è FLOAT)
  if (resolvedType === 'FLOAT') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–º–µ—Ä–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞
    const sizePatterns = [
      'spacing',
      'padding',
      'margin',
      'gap',
      'size',
      'width',
      'height',
      'radius',
      'border-width', // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è border-width
      'border-radius', // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è border-radius
      'border',
      'offset',
      'inset',
      'top',
      'bottom',
      'left',
      'right',
      'font-size' // –î–æ–±–∞–≤–ª—è–µ–º font-size –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤ —à—Ä–∏—Ñ—Ç–∞
    ];
    
    // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è line-height (–¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —á–∏—Å–ª–æ–º)
    if (name.includes('line-height')) {
      return value;
    }
    
    if (sizePatterns.some(pattern => name.includes(pattern))) {
      return `${value}px`;
    }
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ –∫–∞–∫ –µ—Å—Ç—å
  return value;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function resolveVariable(variableId, modeConfig = {}, depth = 0) {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
  if (depth > 10) {
    return null;
  }

  // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫—ç—à–∞
  const cacheKey = `${variableId}-${JSON.stringify(modeConfig)}`;
  if (resolveCache.has(cacheKey)) {
    return resolveCache.get(cacheKey);
  }

  const variable = variableMap.get(variableId);
  if (!variable) {
    return null;
  }

  const collection = collectionMap.get(variable.variableCollectionId);
  if (!collection) {
    return null;
  }

  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–∂–∏–º—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const resolvedModes = resolveModeIds(modeConfig);
  const modeId = resolvedModes[collection.name];
  const value = variable.valuesByMode[modeId];

  if (value === null || value === undefined) {
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    if (variable.name.includes('spacing/space-0')) return 0;
    if (variable.name.includes('border-radius/0')) return 0;
    if (variable.name.includes('border-width/0')) return 0;
    
    return null;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–∏–∞—Å–æ–≤
  if (value.type === 'VARIABLE_ALIAS') {
    const aliasId = value.id;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–æ—Å—Å-JSON —Å—Å—ã–ª–æ–∫
    if (aliasId.includes('/') && aliasId.startsWith('VariableID:')) {
      const keyPart = aliasId.substring('VariableID:'.length, aliasId.indexOf('/'));
      const referencedVariable = keyMap.get(keyPart);
      
      if (referencedVariable) {
        return resolveVariable(referencedVariable.id, modeConfig, depth + 1);
      } else {
        return null;
      }
    }
    
    // –û–±—ã—á–Ω—ã–µ –∞–ª–∏–∞—Å—ã
    const result = resolveVariable(aliasId, modeConfig, depth + 1);
    resolveCache.set(cacheKey, result);
    return result;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–æ–≤
  if (variable.resolvedType === 'COLOR') {
    const result = rgbaToCSS(value);
    resolveCache.set(cacheKey, result);
    return result;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (variable.resolvedType === 'FLOAT') {
    const result = addUnits(value, variable.name, variable.resolvedType);
    resolveCache.set(cacheKey, result);
    return result;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è 0)
  if (typeof value === 'number') {
    resolveCache.set(cacheKey, value);
    return value;
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
  resolveCache.set(cacheKey, value);
  return value;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ –∏–º–µ–Ω–∏
function getVariableByName(name, modeConfig = {}) {
  for (const variable of variableMap.values()) {
    if (variable.name === name) {
      return resolveVariable(variable.id, modeConfig);
    }
  }
  return null;
}

// –ü–æ–∏—Å–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
function findVariablesByPattern(pattern, filterByCollection = null) {
  const matches = [];
  
  for (const variable of variableMap.values()) {
    const collection = collectionMap.get(variable.variableCollectionId);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    if (filterByCollection && collection.name !== filterByCollection) {
      continue;
    }
    
    if (variable.name.includes(pattern)) {
      matches.push({
        name: variable.name,
        id: variable.id,
        type: variable.resolvedType,
        collectionName: collection?.name,
        description: variable.description || ''
      });
    }
  }
  
  return matches;
}


// –ü–æ–ª—É—á–µ–Ω–∏–µ component —Ç–æ–∫–µ–Ω–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ semantic –∏ component –∫–æ–ª–ª–µ–∫—Ü–∏–π
function getComponentTokens(modeConfig = {}) {
  const componentVariables = {};
  
  for (const [varId, variable] of variableMap.entries()) {
    const collection = collectionMap.get(variable.variableCollectionId);
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (!collection || IGNORED_COLLECTIONS.includes(collection.name)) {
      continue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const isComponentCollection = COMPONENT_COLLECTION_PATTERNS.some(pattern => {
      if (typeof pattern === 'string') {
        return collection.name.toLowerCase().includes(pattern.toLowerCase());
      }
      return pattern.test(collection.name);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ semantic –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π
    const isSemanticCollection = collection.name === COLLECTION_HIERARCHY.SEMANTIC;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±–∞–∑–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π (primitive/theme/adaptive)
    const isBaseCollection = [
      COLLECTION_HIERARCHY.PRIMITIVE,
      COLLECTION_HIERARCHY.THEME,
      COLLECTION_HIERARCHY.ADAPTIVE
    ].includes(collection.name);
    
    // –í–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ semantic –∏ component –∫–æ–ª–ª–µ–∫—Ü–∏–π
    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ primitive/theme/adaptive
    if ((isComponentCollection || isSemanticCollection) && !isBaseCollection) {
      const resolvedValue = resolveVariable(varId, modeConfig);
      if (resolvedValue !== null) {
        componentVariables[variable.name] = resolvedValue;
      }
    }
  }
  
  return componentVariables;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ CamelCase –≤ kebab-case
 * –ü—Ä–∏–º–µ—Ä—ã:
 * - radioIcon ‚Üí radio-icon
 * - maxWidth ‚Üí max-width
 * - fontSize ‚Üí font-size
 * 
 * @param {String} str - –°—Ç—Ä–æ–∫–∞ –≤ CamelCase
 * @returns {String} –°—Ç—Ä–æ–∫–∞ –≤ kebab-case
 */
function camelToKebab(str) {
  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å 'px' –∫ —Ç–æ–∫–µ–Ω—É
function shouldAddPxSuffix(tokenName) {
  const pxTokenPatterns = [
    /^spacing\//,
    /^padding\//,
    /^margin\//,
    /^gap\//,
    /^size\//,
    /\/size\//,
    /\/padding\//,
    /\/margin\//,
    /\/gap\//,
    /\/min-width/,
    /\/max-width/,
    /\/min-height/,
    /\/max-height/,
    /border-radius/,
    /border-width/,
    /paragraph-spacing/,
    /checkbox\/size/,
    /checkbox\/padding/,
    /radiobutton\/size/,
    /button\/padding/,
    /button\/text-container\/padding-horizontal/,
    /chips\/size/,
    /chips\/padding/,
    /toggle\/size/,
    /counter\/size/,
    /main-content\/max-width/,
    /main-content\/min-width/
  ];
  
  return pxTokenPatterns.some(pattern => pattern.test(tokenName));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º 'px' –≥–¥–µ –Ω—É–∂–Ω–æ
function formatTokenValue(tokenName, value) {
  // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å—Ç—Ä–æ–∫–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–ª–∏ var() - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (typeof value === 'string' && (
    value.includes('px') || 
    value.includes('rem') || 
    value.includes('%') || 
    value.includes('var(') ||
    value.includes('em') ||
    value.includes('vh') ||
    value.includes('vw')
  )) {
    return value;
  }
  
  // ‚úÖ –î–û–ë–ê–í–ò–¢–¨: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ % –∫ opacity —Ç–æ–∫–µ–Ω–∞–º
  if (typeof value === 'number' && tokenName.includes('opacity')) {
    return `${value}%`;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ –∏ —Ç–æ–∫–µ–Ω —Ç—Ä–µ–±—É–µ—Ç px - –¥–æ–±–∞–≤–ª—è–µ–º
  if (typeof value === 'number' && shouldAddPxSuffix(tokenName)) {
    return `${value}px`;
  }
  
  return value;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è –∏–Ω–∂–µ–∫—Ü–∏–∏ –≤ :root
 * 
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:
 * - CamelCase ‚Üí kebab-case (radioIcon ‚Üí radio-icon)
 * - –°–ª—ç—à–∏ ‚Üí –¥–µ—Ñ–∏—Å—ã (spacing/space-8 ‚Üí spacing-space-8)
 * - –í—Å–µ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 * - "radiobutton/size/radioIcon/md" ‚Üí "--radiobutton-size-radio-icon-md"
 * - "button/maxWidth" ‚Üí "--button-max-width"
 * 
 * @param {Object} modeConfig - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ (theme, breakpoint)
 * @param {String} prefix - –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '--')
 * @returns {String} –°—Ç—Ä–æ–∫–∞ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
 */
function generateCSSVariables(modeConfig = {}, prefix = '--') {
  const componentTokens = getComponentTokens(modeConfig);
  
  const cssVars = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã (semantic + component)
  for (const [name, value] of Object.entries(componentTokens)) {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CamelCase –≤ kebab-case, –∑–∞—Ç–µ–º –∑–∞–º–µ–Ω—è–µ–º —Å–ª—ç—à–∏ –∏ –¥–µ–ª–∞–µ–º toLowerCase
    const cssName = camelToKebab(name).replace(/\//g, '-').toLowerCase();
    const formattedValue = formatTokenValue(name, value);
    cssVars.push(`${prefix}${cssName}: ${formattedValue};`);
  }
  
  return cssVars.join('\n');
}

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (–ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã/breakpoint)
function clearCache() {
  resolveCache.clear();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function getConfigInfo() {
  return {
    collections: Array.from(collectionMap.values()).map(c => ({
      name: c.name,
      modes: c.modes.map(m => m.name),
      defaultMode: c.modes.find(m => m.modeId === c.defaultModeId)?.name,
      variableCount: c.variables.length,
      isCore: Object.values(COLLECTION_HIERARCHY).includes(c.name)
    })),
    hierarchy: COLLECTION_HIERARCHY,
    ignoredCollections: IGNORED_COLLECTIONS,
    totalVariables: variableMap.size
  };
}

export { 
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  resolveVariable, 
  getVariableByName, 
  getComponentTokens,
  
  // –£—Ç–∏–ª–∏—Ç—ã
  getAvailableCollections,
  findVariablesByPattern,
  generateCSSVariables,
  clearCache,
  getConfigInfo,
  
  // –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
  shouldAddPxSuffix,
  formatTokenValue,
  camelToKebab,
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  COLLECTION_HIERARCHY,
  COMPONENT_COLLECTION_PATTERNS,
  
  // –ö–∞—Ä—Ç—ã (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  variableMap, 
  collectionMap,
  modeMap,
  keyMap
};